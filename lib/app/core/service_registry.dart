// lib/app/core/service_registry.dart

import 'package:flutter/foundation.dart';
import 'package:musilingo/app/core/result.dart';

/// Registry centralizado para gerenciamento de depend√™ncias
/// Substitui o padr√£o Singleton antipattern por inje√ß√£o de depend√™ncias
class ServiceRegistry {
  static final Map<Type, dynamic> _services = {};
  static final Map<Type, dynamic> _factories = {};
  static bool _isInitialized = false;

  /// Registra um servi√ßo como singleton
  static void registerSingleton<T>(T service) {
    _services[T] = service;
    debugPrint('üîß Servi√ßo singleton registrado: ${T.toString()}');
  }

  /// Registra uma factory para cria√ß√£o de inst√¢ncias
  static void registerFactory<T>(T Function() factory) {
    _factories[T] = factory;
    debugPrint('üè≠ Factory registrada: ${T.toString()}');
  }

  /// Registra uma factory lazy (criada apenas quando necess√°rio)
  static void registerLazySingleton<T>(T Function() factory) {
    _factories[T] = factory;
    debugPrint('üí§ Lazy singleton registrado: ${T.toString()}');
  }

  /// Obt√©m uma inst√¢ncia do servi√ßo
  static T get<T>() {
    // Primeiro, verificar se existe como singleton
    if (_services.containsKey(T)) {
      return _services[T] as T;
    }

    // Verificar se existe factory
    if (_factories.containsKey(T)) {
      final factory = _factories[T] as T Function();
      final instance = factory();

      // Se √© lazy singleton, armazenar para reuso
      if (!_services.containsKey(T)) {
        _services[T] = instance;
      }

      return instance;
    }

    throw ServiceNotRegisteredException(T);
  }

  /// Tenta obter um servi√ßo, retorna null se n√£o existir
  static T? tryGet<T>() {
    try {
      return get<T>();
    } on ServiceNotRegisteredException {
      return null;
    }
  }

  /// Verifica se um servi√ßo est√° registrado
  static bool isRegistered<T>() {
    return _services.containsKey(T) || _factories.containsKey(T);
  }

  /// Remove um servi√ßo do registry
  static void unregister<T>() {
    _services.remove(T);
    _factories.remove(T);
    debugPrint('üóëÔ∏è Servi√ßo removido: ${T.toString()}');
  }

  /// Substitui um servi√ßo existente (√∫til para testes)
  static void replace<T>(T newService) {
    _services[T] = newService;
    debugPrint('üîÑ Servi√ßo substitu√≠do: ${T.toString()}');
  }

  /// Inicializa√ß√£o dos servi√ßos principais
  static Future<DatabaseResult<void>> initialize() async {
    if (_isInitialized) {
      return const Success(null);
    }

    try {
      debugPrint('üöÄ Inicializando ServiceRegistry...');

      // Registrar servi√ßos core
      await _registerCoreServices();

      _isInitialized = true;
      debugPrint('‚úÖ ServiceRegistry inicializado com sucesso');

      return const Success(null);
    } catch (e) {
      debugPrint('‚ùå Erro ao inicializar ServiceRegistry: $e');
      return Failure(
        'Falha na inicializa√ß√£o dos servi√ßos',
        originalException: e is Exception ? e : Exception(e.toString()),
      );
    }
  }

  /// Registra servi√ßos principais da aplica√ß√£o
  static Future<void> _registerCoreServices() async {
    // As importa√ß√µes ser√£o feitas conforme necess√°rio para evitar ciclos
    debugPrint('üì¶ Registrando servi√ßos core...');

    // Servi√ßos ser√£o registrados no main.dart ou onde apropriado
    // para evitar depend√™ncias circulares
  }

  /// Limpa todos os servi√ßos - √∫til para testes e dispose
  static void clear() {
    debugPrint('üßπ Limpando todos os servi√ßos...');

    // Fazer dispose dos servi√ßos que implementam Disposable
    for (final service in _services.values) {
      if (service is Disposable) {
        try {
          service.dispose();
        } catch (e) {
          debugPrint('‚ö†Ô∏è Erro no dispose de ${service.runtimeType}: $e');
        }
      }
    }

    _services.clear();
    _factories.clear();
    _isInitialized = false;

    debugPrint('‚úÖ ServiceRegistry limpo');
  }

  /// Informa√ß√µes de debug sobre servi√ßos registrados
  static void printDebugInfo() {
    debugPrint('üîç ServiceRegistry Debug Info:');
    debugPrint('  Singletons: ${_services.keys.map((t) => t.toString()).join(', ')}');
    debugPrint('  Factories: ${_factories.keys.map((t) => t.toString()).join(', ')}');
    debugPrint('  Inicializado: $_isInitialized');
  }

  /// Valida se todos os servi√ßos cr√≠ticos est√£o registrados
  static DatabaseResult<void> validate() {
    final criticalServices = <Type>[
      // Lista de servi√ßos que s√£o obrigat√≥rios
      // Ser√° preenchida conforme necess√°rio
    ];

    for (final serviceType in criticalServices) {
      if (!isRegistered<dynamic>()) {
        return Failure(
          'Servi√ßo cr√≠tico n√£o registrado: ${serviceType.toString()}',
          errorCode: 'MISSING_CRITICAL_SERVICE',
        );
      }
    }

    return const Success(null);
  }

  // Getters para informa√ß√µes
  static bool get isInitialized => _isInitialized;
  static int get serviceCount => _services.length;
  static int get factoryCount => _factories.length;
}

/// Interface para servi√ßos que precisam de cleanup
abstract class Disposable {
  void dispose();
}

/// Exception customizada para servi√ßos n√£o registrados
class ServiceNotRegisteredException implements Exception {
  final Type serviceType;

  ServiceNotRegisteredException(this.serviceType);

  @override
  String toString() =>
      'Servi√ßo n√£o registrado: ${serviceType.toString()}\n'
      'Registre o servi√ßo usando ServiceRegistry.registerSingleton<$serviceType>() ou '
      'ServiceRegistry.registerFactory<$serviceType>()';
}