// lib/services/verovio_service.dart

import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:verovio_flutter/verovio_flutter.dart';

class VerovioService {
  static VerovioService? _instance;
  static VerovioService get instance => _instance ??= VerovioService._();
  VerovioService._();

  bool _isInitialized = false;
  String? currentSVG;
  final Map<String, String> _svgCache = {};

  // O estado do toolkit √© mantido nativamente, ent√£o n√£o precisamos de uma inst√¢ncia de _verovio aqui.

  Future<void> initialize() async {
    if (_isInitialized) {
      return;
    }
    try {
      debugPrint('üîÑ Inicializando Verovio...');
      // Chamada est√°tica correta
      VerovioFlutter.initialize();
      await _runDiagnostics();
      _isInitialized = true;
      debugPrint('‚úÖ FASE 3.1: Verovio inicializado com sucesso!');
    } catch (e) {
      _isInitialized = false;
      debugPrint('‚ùå FASE 3.1: Falha ao inicializar Verovio: $e');
      rethrow;
    }
  }

  Future<void> _runDiagnostics() async {
    debugPrint('üîÑ Iniciando diagn√≥stico completo do Verovio...');
    try {
      debugPrint('üîç Testando disponibilidade do VerovioFlutter...');
      // Chamada est√°tica correta
      final version = VerovioFlutter.getVersion();
      if (version.isNotEmpty && version != 'unknown') {
        debugPrint('üìã Vers√£o Verovio dispon√≠vel: $version');
      } else {
        throw Exception('Vers√£o do Verovio n√£o encontrada');
      }
      await _applyDefaultOptions();
      debugPrint('‚úÖ SUCESSO: Verovio REAL $version totalmente funcional');
    } catch (e) {
      debugPrint('‚ùå FASE 3.1: Diagn√≥stico falhou: $e');
      throw Exception('Diagn√≥stico completo do Verovio falhou');
    }
  }

  Future<void> _applyDefaultOptions() async {
    final options = {
      'pageWidth': 1200,
      'pageHeight': 400,
      'scale': 50,
      'font': 'Bravura',
      'bgColor': 'transparent',
      'stroke': '#000000', // Cor preta para visibilidade no fundo branco
      'pageMarginTop': 0,
      'pageMarginBottom': 0,
      'pageMarginLeft': 0,
      'pageMarginRight': 0,
    };
    // Converte o Map para uma String JSON e chama o m√©todo est√°tico
    VerovioFlutter.setOptions(jsonEncode(options));
  }

  Future<String?> renderMusicXML(
    String musicXML, {
    String? cacheKey,
    double zoomLevel = 1.0,
  }) async {
    if (!_isInitialized) {
      await initialize();
    }

    final effectiveCacheKey = cacheKey ?? musicXML.hashCode.toString();
    if (_svgCache.containsKey(effectiveCacheKey)) {
      debugPrint('üöÄ Cache hit para $effectiveCacheKey');
      currentSVG = _svgCache[effectiveCacheKey];
      // Recarregar os dados no toolkit para garantir que ele esteja no estado certo para edi√ß√µes
      VerovioFlutter.loadMusicXML(musicXML);
      return currentSVG;
    }

    try {
      debugPrint(
          'üéµ Tentando Verovio com MusicXML (${musicXML.length} chars)...');

      final scale = (50 * zoomLevel).round();
      final options = {
        'pageWidth': (2000 * zoomLevel).round(),
        'pageHeight': (400 * zoomLevel).round(),
        'scale': scale,
        'stroke': '#000000', // Garante a cor preta para visibilidade
      };

      // Chamadas est√°ticas e na ordem correta
      VerovioFlutter.setOptions(jsonEncode(options));
      VerovioFlutter.loadMusicXML(musicXML);
      final svg = VerovioFlutter.renderToSVG(1); // Renderiza a primeira p√°gina

      if (svg != null && svg.isNotEmpty) {
        currentSVG = svg;
        _svgCache[effectiveCacheKey] = svg;
        debugPrint('üíæ SVG do Verovio salvo no cache: $effectiveCacheKey');
        return svg;
      } else {
        throw Exception('SVG gerado √© inv√°lido ou vazio');
      }
    } catch (e) {
      debugPrint('‚ùå FASE 3.1: Erro na renderiza√ß√£o do Verovio: $e');
      return null;
    }
  }

  // M√©todos de colora√ß√£o agora s√£o simulados, pois a FFI atual n√£o os exp√µe.
  // A l√≥gica correta seria adicionar `colorNote` √† sua FFI em C++.
  // Por enquanto, vamos retornar o SVG atual para n√£o quebrar a UI.
  Future<String?> colorNote(String noteId, String color) async {
    debugPrint(
        "‚ö†Ô∏è AVISO: A fun√ß√£o 'colorNote' n√£o est√° implementada na FFI atual. Nenhuma mudan√ßa visual ocorrer√°.");
    return currentSVG;
  }

  Future<String?> colorMultipleNotes(Map<String, String> noteColors) async {
    debugPrint(
        "‚ö†Ô∏è AVISO: A fun√ß√£o 'colorMultipleNotes' n√£o est√° implementada na FFI atual. Nenhuma mudan√ßa visual ocorrer√°.");
    return currentSVG;
  }

  Future<void> clearAllColors() async {
    debugPrint(
        "‚ö†Ô∏è AVISO: A fun√ß√£o 'clearAllColors' n√£o est√° implementada na FFI atual.");
    // Para limpar as cores, precisar√≠amos recarregar o SVG original.
    // O sistema de cache j√° lida com isso na pr√≥xima renderiza√ß√£o.
  }

  // Fun√ß√µes de zoom e largura da p√°gina agora funcionam corretamente
  Future<void> setZoomLevel(double zoom) async {
    if (!_isInitialized) return;
    final options = {'scale': (50 * zoom).round()};
    VerovioFlutter.setOptions(jsonEncode(options));
  }

  Future<void> setPageWidth(int width) async {
    if (!_isInitialized) return;
    final options = {'pageWidth': width};
    VerovioFlutter.setOptions(jsonEncode(options));
  }

  void clearCache() {
    _svgCache.clear();
    debugPrint('üóëÔ∏è Cache do Verovio limpo');
  }
}
